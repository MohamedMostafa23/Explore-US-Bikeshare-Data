import time
import pandas as pd
import numpy as np

CITY_DATA = { 'chicago': 'chicago.csv',
              'new york city': 'new_york_city.csv',
              'washington': 'washington.csv' }

months = ['january', 'february', 'march', 'april', 'may', 'june' , 'all']
days = ['saturday', 'sunday' , 'monday' , 'tuesday' , 'wednesday' , 'friday' , 'all']



def get_filters():
    """
    Asks user to specify a city, month, and day to analyze.

    Returns:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    """
    print('Hello! Let\'s explore some US bikeshare data!')
    # TO DO: get user input for city (chicago, new york city, washington). HINT: Use a while loop to handle invalid inputs
    while(True):
        city = input("Please enter the city you want to analyze: ").lower()
        if city == 'chicago' or city == 'washington' or city == 'new york' :
            break 
        else :
            print("please enter a city chicago washington new york")
            continue
        
    # TO DO: get user input for month (all, january, february, ... , june)
    while(True):
        month = input("Please enter the month you want to filter with or all if u dont want to filter by month: ").lower()
        if month in months :
            break
        else :
            print("please enter a valid month \n")
            continue
            
    # TO DO: get user input for day of week (all, monday, tuesday, ... sunday)
    while(True):
        day = input("Please enter the day you want to filter with or all if u dont want to filter by day: ").lower()
        if day in days :
            break
        else :
            print("please enter a valid day \n")
            continue

            
    print('-'*40)
    return city, month, day


def load_data(city, month, day):
    """
    Loads data for the specified city and filters by month and day if applicable.

    Args:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    Returns:
        df - Pandas DataFrame containing city data filtered by month and day
    """

    # load data file into a dataframe
    df = pd.read_csv(CITY_DATA[city])

    # convert the Start Time column to datetime
    df['Start Time'] = pd.to_datetime(df['Start Time'])

    # extract month and day of week from Start Time to create new columns
    df['month'] = df['Start Time'].dt.month
    df['day_of_week'] = df['Start Time'].dt.weekday_name
    df['hour'] = df['Start Time'].dt.hour
    # filter by month if applicable
    if month != 'all':
        # use the index of the months list to get the corresponding int
        month = months.index(month) + 1

        # filter by month to create the new dataframe
        df = df[df['month'] == month]

    # filter by day of week if applicable
    if day != 'all':
        # filter by day of week to create the new dataframe
        df = df[df['day_of_week'] == day.title()]

    return df


def time_stats(df):
    """Displays statistics on the most frequent times of travel."""

    print('\nCalculating The Most Frequent Times of Travel...\n')
    start_time = time.time()

    # TO DO: display the most common month
    popular_month = df['month'].mode()[0]
    print('Most common month :', popular_month)   
    
    # TO DO: display the most common day of week
    popular_day = df['day_of_week'].mode()[0]
    print('Most common day :', popular_day)
    
    # TO DO: display the most common start hour
    popular_hour = df['hour'].mode()[0]
    print('Most common Start Hour:', popular_hour)


def station_stats(df):
    """Displays statistics on the most popular stations and trip."""

    print('\nCalculating The Most Popular Stations and Trip...\n')
    start_time = time.time()

    # TO DO: display most commonly used start station
    com_start = df['Start Station'].mode()[0]
    print('Most common used start station:', com_start)

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)    

    # TO DO: display most commonly used end station
    com_end = df['End Station'].mode()[0]
    print('Most common used end station:', com_start)

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)    

    # TO DO: display most frequent combination of start station and end station trip
    df['com_combination'] = df['Start Station'] + ' and ' + df['End Station']
    common_combination = df['com_combination'].mode()[0]
    print('Most frequent combination of start station and end station trip:', common_combination)
    
    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)      



def trip_duration_stats(df):
    """Displays statistics on the total and average trip duration."""

    print('\nCalculating Trip Duration...\n')
    start_time = time.time()
    # TO DO: display total travel time
    Travel_Time = df['Trip Duration'].sum()
    print("total travel time: " + str(Travel_Time))


    # TO DO: display mean travel time
    mean_time = df['Trip Duration'].mean()
    print("mean travel time: " + str(mean_time))

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def user_stats(df):
    """Displays statistics on bikeshare users."""

    print('\nCalculating User Stats...\n')
    start_time = time.time()

    # TO DO: Display counts of user types
    user_types = df['User Type'].value_counts()

    print('counts of user types {} \n'.format(user_types))   

    # TO DO: Display counts of gender
    if 'Gender' in df:
        gender_conuts = df['Gender'].value_counts()
        print('counts of gender {} \n'.format(gender_conuts) )    
    
        # TO DO: Display earliest, most recent, and most common year of birth
        early = df['Birth Year'].min()
        recent = df['Birth Year'].max()
        common = df['Birth Year'].mode()

        print('earliest year of birth is {} \n most recent year of birth is {} \n most common year of birth is {} \n'.format(early,recent,common) )  

        print("\nThis took %s seconds." % (time.time() - start_time))
        print('-'*40)
    
    else :
        print('Gender stats cannot be calculated because Gender does not appear in the dataframe')

        
def display_data(df) :
    view_data = input("Would you like to view 5 rows of individual trip data? Enter yes or no?")
    start_loc = 0
    while (True):        
        if view_data == 'yes' :
            print(df.iloc[start_loc:start_loc+5])
            start_loc += 5
            view_data = input("Do you wish to continue?: enter yes or no").lower()           
            continue
            
        elif view_data == 'no' :
            break
            
        else : 
            print("please enter only yes or no \n")    
            view_data = input("Do you wish to continue?: enter yes or no").lower()  
            continue

              
        
        
def main():
    while True:
        city, month, day = get_filters()
        df = load_data(city, month, day)

        time_stats(df)
        station_stats(df)
        trip_duration_stats(df)
        user_stats(df)
        display_data(df)
       



if __name__ == "__main__":
	main()
